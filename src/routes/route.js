const express = require('express')
const router = express.Router()
const { validate } = require('../middlewares/Validate')
const { authenticate, authorize } = require('../middlewares/JWTAction')

const OrderRoutes = require('../modules/order/routes/order.routes')

const AuthValidate = require('../validates/AuthValidate')
const AuthController = require('../controllers/AuthController')
const RoleController = require('../controllers/RoleController')
const PermissionController = require('../controllers/PermissionController')
const UserController = require('../controllers/UserController')
const PostController = require('../controllers/PostController')
const TopicController = require('../controllers/TopicController')
const CommentController = require('../controllers/CommentController')
const GoogleOauthController = require('../controllers/GoogleOauthController')
const ForgotPasswordController = require('../controllers/ForgotPasswordController')
const RestPasswordController = require('../controllers/ResetPasswordController')
const Auth2Controller = require('../controllers/Auth2Controller')
const { authenticate2, authorize2 } = require('../controllers/Auth2Controller')

const RoleValidate = require('../validates/RoleValidate')
const NavigationMenuValidate = require('../validates/NavigationMenuValidate')
const UserValidate = require('../validates/UserValidate')
const NavigationMenuController = require('../controllers/NavigationMenuController')
const TopicValidate = require('../validates/TopicValidate')
const PostValidate = require('../validates/PostValidate')
const CommentValidate = require('../validates/CommentValidate')
const PermissionValidate = require('../validates/PermissionValidate')

const PERMISSIONS = require('../constants/permission')

const PageRoutes = require('./PageRoutes')
const PageSectionRoutes = require('./PageSectionRoutes')
const ProductRoutes = require('../modules/product/routes/product.routes')
const RecruitRoutes = require('../modules/recruit/routes/recruit.routes')
const FileRoutes = require('../modules/upload/routes/upload.routes')
const DiscountRoutes = require('../modules/discount/routes/discount.routes')
const ContactRoutes = require('../modules/contact/routes/contact.routes')
const WishListRoutes = require('../modules/wish_list/routes/wish.list.routes')
const AttributeRoutes = require('../modules/product_variant/routes/attribute.routes')
const SpecificationRoutes = require('../modules/product_variant/routes/specification.routes')
const ProductVariantRoutes = require('../modules/product_variant/routes/product.variant.routes')
const SitemapRoutes = require('../modules/sitemap/routes/sitemap.routes')
const CustomerGroupRoutes = require('../modules/customer_group/routes/customerGroup.routes')
const CustomerGroupDiscountRoutes = require('../modules/customer_group_discount/routes/customerGroupDiscount.routes')
const CustomerGroupDiscroutHistoryRoutes = require('../modules/customer_group_discount_histories/routes/customerGroupDiscountHistory.routes')

const { forgotPasswordValidate } = require('../validates/ForgotPasswordValidate')
const { resetPasswordValidate } = require('../validates/ResetPasswordValidate')
const { CreateLimiter } = require('../utils/CreateLimiter')

router.post('/login', CreateLimiter({ max: 100, minutes: 15 }), AuthValidate.login, validate, AuthController.login)
router.get('/logout', authenticate, AuthController.logout)
router.post('/authenticated', authenticate, AuthController.authenticated)
router.post('/register', AuthValidate.register, validate, AuthController.register)

router.post('/auth2/login', CreateLimiter({ max: 100, minutes: 15 }), AuthValidate.login2, validate, Auth2Controller.login)
router.get('/auth2/check-auth', authenticate2, authorize2([PERMISSIONS.ROLE_VIEW]), Auth2Controller.checkAuth)
router.post('/auth2/refresh-token', Auth2Controller.refreshToken)
router.post('/auth2/logout', authenticate2, Auth2Controller.logout)

router.post('/forgot-password', forgotPasswordValidate, validate, ForgotPasswordController.forgotPassword)
router.post('/reset-password', resetPasswordValidate, validate, RestPasswordController.resetPassword)

router.get('/permission/shows', authenticate, authorize([PERMISSIONS.PERMISSION_VIEW]), PermissionController.getAll)
router.get('/permission/show/:id', authenticate, authorize([PERMISSIONS.PERMISSION_VIEW]), PermissionValidate.show, validate, PermissionController.getById)
router.post('/permission/create', authenticate, authorize([PERMISSIONS.PERMISSION_CREATE]), PermissionValidate.create, validate, PermissionController.create)
router.put('/permission/update/:id', authenticate, authorize([PERMISSIONS.PERMISSION_UPDATE]), PermissionValidate.update, validate, PermissionController.update)
router.delete('/permission/destroy/:id', authenticate, authorize([PERMISSIONS.PERMISSION_DELETE]), PermissionValidate.destroy, validate, PermissionController.remove)

router.get('/role/shows', authenticate, authorize([PERMISSIONS.ROLE_VIEW]), RoleController.getRoles)
router.get('/role/show/:id', authenticate, authorize([PERMISSIONS.ROLE_DETAIL]), RoleValidate.show, validate, RoleController.getRole)
router.post('/role/create', authenticate, authorize([PERMISSIONS.ROLE_CREATE]), RoleValidate.create, validate, RoleController.createRole)
router.put('/role/update/:id', authenticate, authorize([PERMISSIONS.ROLE_UPDATE]), RoleValidate.update, validate, RoleController.updateRole)
router.delete('/role/destroy/:id', authenticate, authorize([PERMISSIONS.ROLE_DELETE]), RoleValidate.destroy, validate, RoleController.deleteRole)

router.post('/user/create', authenticate, authorize([PERMISSIONS.USER_CREATE]), UserValidate.create, validate, UserController.create)
router.get('/user/show/:id', authenticate, authorize([PERMISSIONS.USER_VIEW]), UserValidate.show, validate, UserController.show)
router.get('/user/shows', authenticate, authorize([PERMISSIONS.USER_DETAIL]), UserValidate.validateQuery, validate, UserController.shows)
router.put('/user/update/:id', authenticate, authorize([PERMISSIONS.USER_UPDATE]), UserValidate.update, validate, UserController.update)
router.delete('/user/destroy/:id', authenticate, authorize([PERMISSIONS.USER_DELETE]), UserValidate.destroy, validate, UserController.destroy)
router.put('/user/change-password', authenticate, authorize(), UserValidate.changePassword, validate, UserController.changePassword)
router.get('/user/profile', authenticate, UserController.getUserProfile)
router.put('/user/update-profile', authenticate, UserValidate.updateProfile, validate, UserController.updateUserProfile)
router.post('/user/address/create', authenticate, UserValidate.addressBody, validate, UserController.createUserAddress)
router.put('/user/address/update/:id', authenticate, UserValidate.addressBody, validate, UserController.updateUserAddress)
router.delete('/user/address/destroy/:id', authenticate, UserController.deleteUserAddress)

router.get('/post/shows', authenticate, authorize([PERMISSIONS.POST_VIEW]), PostController.getPosts)
router.get('/post/public/shows', PostController.getPublicPosts)
router.get('/post/show/:slug', PostController.getPostBySlug)
router.get('/post/:id', PostController.getPostById)
router.post('/post/create', authenticate, authorize([PERMISSIONS.POST_CREATE]), PostValidate.create, validate, PostController.createPost)
router.put('/post/update/:id', authenticate, authorize([PERMISSIONS.POST_UPDATE]), PostValidate.update, validate, PostController.updatePost)
router.put('/post/update-status/:id', authenticate, authorize([PERMISSIONS.POST_STATUS]), PostValidate.updateStatus, validate, PostController.updateStatus)
router.delete('/post/destroy/:id', authenticate, authorize([PERMISSIONS.POST_DELETE]), PostValidate.deleteById, validate, PostController.deletePost)

router.get('/topic/shows', authenticate, authorize([PERMISSIONS.TOPIC_VIEW]), TopicController.getTopics)
router.get('/topic/public/shows', TopicController.getPublicTopics)
router.get('/topic/:id', TopicController.getTopicById)
router.post('/topic/create', authenticate, authorize([PERMISSIONS.TOPIC_CREATE]), TopicValidate.create, validate, TopicController.createTopic)
router.put('/topic/update/:id', authenticate, authorize([PERMISSIONS.TOPIC_UPDATE]), TopicValidate.update, validate, TopicController.updateTopic)
router.put('/topic/update-status/:id', authenticate, authorize([PERMISSIONS.TOPIC_MANAGE_STATUS]), TopicValidate.updateStatus, validate, TopicController.updateStatus)
router.delete('/topic/destroy/:id', authenticate, authorize([PERMISSIONS.TOPIC_DELETE]), TopicController.deleteTopic)

router.get('/comment/:provider/shows', authenticate, authorize([]), CommentValidate.shows, validate, CommentController.getComments)
router.get('/comment/:provider/public/shows', CommentValidate.shows, validate, CommentController.getPublicComments)
router.post('/comment/:provider/create', authenticate, CommentValidate.create, validate, CommentController.createComment)
router.put('/comment/:provider/update-status/:id', authenticate, authorize([PERMISSIONS.COMMENT_MANAGE_STATUS]), CommentValidate.updateStatus, validate, CommentController.updateCommentStatus)
router.put('/comment/:provider/update/:id', authenticate, CommentValidate.update, validate, CommentController.updateComment)
router.delete('/comment/destroy/:id', authenticate, CommentController.deleteComment)
router.delete('/comment/user/destroy/:id', authenticate, CommentValidate.deleteByUser, validate, CommentController.deleteCommentByUser)

router.get('/:from/auth/:provider/redirect', GoogleOauthController.redirect)
router.get('/:from/auth/:provider/callback', GoogleOauthController.callback)

router.post('/navigation/create', authenticate, authorize(), NavigationMenuValidate.create, validate, NavigationMenuController.createMenu)
router.get('/navigation/show/:id', authenticate, authorize(), NavigationMenuValidate.show, validate, NavigationMenuController.getMenuById)
router.get('/navigation/shows', authenticate, authorize(), NavigationMenuController.getAllMenus)
router.put('/navigation/update/:id', authenticate, authorize(), NavigationMenuValidate.update, validate, NavigationMenuController.updateMenu)
router.delete('/navigation/destroy/:id', authenticate, authorize(), NavigationMenuValidate.destroy, validate, NavigationMenuController.deleteMenu)
router.get('/navigation/public/shows', NavigationMenuController.getAllMenus)

router.use(FileRoutes)
router.use(ProductRoutes)
router.use(RecruitRoutes)
router.use('/page', PageRoutes)
router.use('/page-section', PageSectionRoutes)
router.use(OrderRoutes)
router.use(DiscountRoutes)
router.use(ContactRoutes)
router.use(WishListRoutes)
router.use(AttributeRoutes)
router.use(SpecificationRoutes)
router.use(ProductVariantRoutes)
router.use(SitemapRoutes)
router.use(CustomerGroupRoutes)
router.use(CustomerGroupDiscountRoutes)
router.use(CustomerGroupDiscroutHistoryRoutes)

module.exports = router
